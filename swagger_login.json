{
  "openapi": "3.0.1",
  "info": {
    "title": "API Docs",
    "version": "v1.0.0"
  },
  "paths": {
    "/accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Retrieve available accounts for the user",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SellerAccountResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SellerAccountResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SellerAccountResource"
                }
              }
            }
          }
        }
      }
    },
    "/posusers": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get information for POS users using ids.",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SellerUserResource"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SellerUserResource"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SellerUserResource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Retrieve Event information using EventId or EventMappingId",
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "description": "The id of the event",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "eventMappingId",
            "in": "query",
            "description": "The mapping GUID of the unmapped event",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EventInfoResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventInfoResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventInfoResource"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          }
        }
      }
    },
    "/holds/{holdId}": {
      "get": {
        "tags": [
          "Holds"
        ],
        "summary": "Retrieves hold by hold ID.",
        "parameters": [
          {
            "name": "holdId",
            "in": "path",
            "description": "The id of the hold",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HoldResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldResource"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Holds"
        ],
        "summary": "Update a hold.",
        "parameters": [
          {
            "name": "holdId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The sale to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HoldUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/HoldUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/HoldUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HoldResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldResource"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Holds"
        ],
        "summary": "Delete hold.",
        "parameters": [
          {
            "name": "holdId",
            "in": "path",
            "description": "The hold ID to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/holds": {
      "get": {
        "tags": [
          "Holds"
        ],
        "summary": "Retrieves holds.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoldResource"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoldResource"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoldResource"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Holds"
        ],
        "summary": "Create hold.",
        "requestBody": {
          "description": "The hold to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HoldRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/HoldRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/HoldRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HoldResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldResource"
                }
              }
            }
          }
        }
      }
    },
    "/holds/{marketplaceSaleId}/{marketplace}": {
      "get": {
        "tags": [
          "Holds"
        ],
        "summary": "Retrieves a hold by the marketplaceName and marketplaceSaleId",
        "parameters": [
          {
            "name": "marketplaceSaleId",
            "in": "path",
            "description": "The marketplaceSaleId of the hold",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "marketplace",
            "in": "path",
            "description": "The name the market place",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/HoldResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldResource"
                }
              }
            }
          }
        }
      }
    },
    "/inventory": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create inventory",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Inventory by Event Id",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The Id of the Event to look up Inventory",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "section",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "seat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingResource"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingResource"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingResource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/inventory/{inventoryId}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Inventory by Id",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "The ID of the inventory to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingResource"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingResource"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingResource"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Inventory"
        ],
        "summary": "Delete Inventory by Id (Inventory must not be connected to any purchase orders)",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "The ID of the inventory to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingResource"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingResource"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingResource"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Inventory"
        ],
        "summary": "Update listing prices, barcodes, and price settings.",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/search": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Search Inventory",
        "parameters": [
          {
            "name": "eventIds",
            "in": "query",
            "description": "Viagogo Event Ids to include",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "categoryIds",
            "in": "query",
            "description": "Viagogo Event Categories to include",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "includeTags",
            "in": "query",
            "description": "Tags to include",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "excludeTags",
            "in": "query",
            "description": "Tags to exclude",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "purchaseStartDate",
            "in": "query",
            "description": "Inclusive starting purchase order date.  The quantity of tickets considered for the listings will only consider tickets associated to valid purchase.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "purchaseEndDate",
            "in": "query",
            "description": "Inclusive ending purchase order date.  The quantity of tickets considered for the listings will only consider tickets associated to valid purchase.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The max number of items returned per api call (default 500; min 1; max 5000)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "description": "Values used to continue iteration for an equivalent query where last left off",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchListingsResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchListingsResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchListingsResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/inventory/seek": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Seek inventory",
        "parameters": [
          {
            "name": "inventoryIds",
            "in": "query",
            "description": "Inventory or Listing Ids to query and return",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchListingsResponse"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchListingsResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchListingsResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/inventory/export": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Exports inventory for exchange integration. The results from this method are sorted by reverse mutation date order.",
        "parameters": [
          {
            "name": "updatedDateSince",
            "in": "query",
            "description": "The update date to be used for looking up inventory. Must be in format yyyy-MM-ddTHH:mm:ss.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results per page. Default page size is 100. Max page size is 5000.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "description": "Token used to paginate result set",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryExportResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryExportResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryExportResource"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/voided": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get voided inventory.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingResource"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingResource"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingResource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/inventory/cancelled": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get cancelled inventory.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseListingResource"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseListingResource"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseListingResource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/inventory/{inventoryId}/split": {
      "patch": {
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SplitInventoryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SplitInventoryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SplitInventoryRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingResource"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingResource"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingResource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/inventory/merge": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeInventoryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeInventoryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MergeInventoryRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/{inventoryId}/prices": {
      "patch": {
        "tags": [
          "Inventory"
        ],
        "summary": "Update listing prices.",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryUpdatePricesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryUpdatePricesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryUpdatePricesRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingResource"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingResource"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingResource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/inventory/{inventoryId}/assets": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get inventory predelivered artifacts",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "The Sale/Invoice ID for the requested fulfillment artifacts",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryAssetResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryAssetResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryAssetResource"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/{inventoryId}/prices/history": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get inventory price history",
        "parameters": [
          {
            "name": "inventoryId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "minDate",
            "in": "query",
            "description": "(Optional) The minimum date (in UTC and ISO format YYYY-MM-DD) to look up result.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "maxDate",
            "in": "query",
            "description": "(Optional) The maximum date (in UTC and ISO format YYYY-MM-DD) to look up result.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of result per page. Default is 100. Max PageSize is 5000.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "description": "The pagination token is used to paginate the results",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryPriceHistoryExportResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryPriceHistoryExportResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryPriceHistoryExportResource"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/bulk": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Bulk Update Listings",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkInventoryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkInventoryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkInventoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkProcessingResultSummaryResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkProcessingResultSummaryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkProcessingResultSummaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/bulk/{bulkProcessingId}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Bulk Update Listings Status",
        "parameters": [
          {
            "name": "bulkProcessingId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkProcessingResultSummaryResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkProcessingResultSummaryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkProcessingResultSummaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/external/{externalId}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Inventory by External ID.",
        "parameters": [
          {
            "name": "externalId",
            "in": "path",
            "description": "The external ID of the inventory to look up",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResource"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}/noninventorylineItems": {
      "get": {
        "tags": [
          "InvoiceNonInventoryChargesAndCredit"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceLineItemsExportResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceLineItemsExportResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceLineItemsExportResource"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "InvoiceNonInventoryChargesAndCredit"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleLineItemCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleLineItemCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaleLineItemCreateRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaleLineItemResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleLineItemResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleLineItemResource"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}/noninventorylineItems/{noninventorylineItemId}": {
      "patch": {
        "tags": [
          "InvoiceNonInventoryChargesAndCredit"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "noninventorylineItemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleLineItemUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleLineItemUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaleLineItemUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaleLineItemResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleLineItemResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleLineItemResource"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "InvoiceNonInventoryChargesAndCredit"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "noninventorylineItemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaleLineItemResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleLineItemResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleLineItemResource"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{marketplaceSaleId}/{marketplace}": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Retrieves an invoice by the marketplaceSaleId and marketplaceName",
        "parameters": [
          {
            "name": "marketplaceSaleId",
            "in": "path",
            "description": "The sale id of the market place",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "marketplace",
            "in": "path",
            "description": "The market place name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaleResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleResource"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Retrieves an invoice by the invoice id",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "The id of the invoice",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaleResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleResource"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Invoices"
        ],
        "summary": "Update a sale.",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The sale to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaleUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaleResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleResource"
                }
              }
            }
          }
        }
      }
    },
    "/invoices": {
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Creates a sale.",
        "requestBody": {
          "description": "The sale to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaleCreateRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaleResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleResource"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get all invoices with pagination. Must provide either updateDateSince, paginationToken or createdDate. If none is provided, the default pagination token = 0 will be used.",
        "parameters": [
          {
            "name": "updateDateSince",
            "in": "query",
            "description": "The update date to be used for looking up invoices. Must be in the format yyyy-MM-ddTHH:mm:ss.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "description": "Pagination token",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "createdDate",
            "in": "query",
            "description": "The create date to be used for looking up invoices. Must be in the format yyyy-MM-ddTHH:mm:ss",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "maxPageSize",
            "in": "query",
            "description": "The maximum number of result per page. Default is 100 and Max Page Size is 5000.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesExportResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesExportResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesExportResource"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{marketplace}/events/{marketplaceEventId}": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get invoices by MarketplaceEventId",
        "parameters": [
          {
            "name": "marketplace",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "marketplaceEventId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesExportResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesExportResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesExportResource"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/events/{eventId}": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get invoices by Event Id",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesExportResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesExportResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesExportResource"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/{invoiceId}/assets": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get fulfillment artifacts",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "The Sale/Invoice ID for the requested fulfillment artifacts",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaleAssetResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleAssetResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleAssetResource"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/seek": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Seek invoices",
        "parameters": [
          {
            "name": "invoiceIds",
            "in": "query",
            "description": "Invoice or Sale Ids to query and return",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesExportResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesExportResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesExportResource"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/bulk": {
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Bulk Update Sales",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdateSaleRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdateSaleRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdateSaleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkProcessingResultSummaryResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkProcessingResultSummaryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkProcessingResultSummaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/bulk/{bulkProcessingId}": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get Bulk Update Sales Status",
        "parameters": [
          {
            "name": "bulkProcessingId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkProcessingResultSummaryResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkProcessingResultSummaryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkProcessingResultSummaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/invoices/external/{externalId}": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get Sale by External ID.",
        "parameters": [
          {
            "name": "externalId",
            "in": "path",
            "description": "The external ID of the sale to look up",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SaleResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleResource"
                }
              }
            }
          }
        }
      }
    },
    "/purchases/{purchaseOrderId}": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Get a purchase order",
        "parameters": [
          {
            "name": "purchaseOrderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Update a purchase order",
        "parameters": [
          {
            "name": "purchaseOrderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Void a purchase order",
        "parameters": [
          {
            "name": "purchaseOrderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/purchases/seek": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Seek purchase orders",
        "parameters": [
          {
            "name": "purchaseOrderIds",
            "in": "query",
            "description": "Purchase order ids to query and return",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              }
            }
          }
        }
      }
    },
    "/purchases": {
      "post": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Create a purchase order",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              }
            }
          }
        }
      }
    },
    "/purchases/search": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Search for purchase orders by filter parameters",
        "parameters": [
          {
            "name": "vendorName",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vendorOrderId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchasesExportResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchasesExportResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchasesExportResource"
                }
              }
            }
          }
        }
      }
    },
    "/purchases/{purchaseOrderId}/payments": {
      "post": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Create new purchase payment for an existing purchase order.",
        "parameters": [
          {
            "name": "purchaseOrderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePurchaseOrderPaymentsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePurchaseOrderPaymentsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePurchaseOrderPaymentsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              }
            }
          }
        }
      }
    },
    "/purchases/{purchaseOrderId}/payments/{paymentId}": {
      "patch": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Update an existing purchase payment in a purchase order",
        "parameters": [
          {
            "name": "purchaseOrderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchasePaymentRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchasePaymentRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PurchasePaymentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Delete an existing purchase payment in a purchase order",
        "parameters": [
          {
            "name": "purchaseOrderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/purchases/{purchaseOrderId}/ticketgroups": {
      "post": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Create ticket groups under a purchase order",
        "parameters": [
          {
            "name": "purchaseOrderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePurchaseOrderTicketGroupsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePurchaseOrderTicketGroupsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePurchaseOrderTicketGroupsRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              }
            }
          }
        }
      }
    },
    "/purchases/{purchaseOrderId}/ticketgroups/{ticketGroupId}": {
      "patch": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Update a ticket group under a purchase order. Any `non-null` fields will be replaced by the patched values.",
        "parameters": [
          {
            "name": "purchaseOrderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "ticketGroupId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketGroupUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketGroupUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TicketGroupUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Delete a ticket group under a purchase order",
        "parameters": [
          {
            "name": "purchaseOrderId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "ticketGroupId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResource"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              }
            }
          }
        }
      }
    },
    "/purchases/bulk": {
      "post": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Bulk Update Purchases",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdatePurchaseRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdatePurchaseRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdatePurchaseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkProcessingResultSummaryResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkProcessingResultSummaryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkProcessingResultSummaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/purchases/bulk/{bulkProcessingId}": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Get Bulk Update Purchases Status",
        "parameters": [
          {
            "name": "bulkProcessingId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BulkProcessingResultSummaryResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkProcessingResultSummaryResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkProcessingResultSummaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/purchases/external/{externalId}": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Get Purchase Order by External ID.",
        "parameters": [
          {
            "name": "externalId",
            "in": "path",
            "description": "The external ID of the purchase order to look up",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseResource"
                }
              }
            }
          }
        }
      }
    },
    "/paymentmethods": {
      "get": {
        "tags": [
          "PurchasePaymentMethod"
        ],
        "summary": "Get all payment methods",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodExportResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodExportResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodExportResource"
                }
              }
            }
          }
        }
      }
    },
    "/vendoraccounts": {
      "get": {
        "tags": [
          "PurchaseVendorAccount"
        ],
        "summary": "Get all active purchase vendor accounts",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseVendorAccountsExportResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseVendorAccountsExportResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseVendorAccountsExportResource"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PurchaseVendorAccount"
        ],
        "summary": "Create new vendor account",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderVendorAccountCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderVendorAccountCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderVendorAccountCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseVendorAccountResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseVendorAccountResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseVendorAccountResource"
                }
              }
            }
          }
        }
      }
    },
    "/vendoraccounts/{vendorAccountId}": {
      "put": {
        "tags": [
          "PurchaseVendorAccount"
        ],
        "summary": "Update vendor account",
        "parameters": [
          {
            "name": "vendorAccountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderVendorAccountUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderVendorAccountUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrderVendorAccountUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseVendorAccountResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseVendorAccountResource"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseVendorAccountResource"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PurchaseVendorAccount"
        ],
        "summary": "Delete vendor account",
        "parameters": [
          {
            "name": "vendorAccountId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/ticketgroups": {
      "get": {
        "tags": [
          "TicketGroups"
        ],
        "summary": "Get Ticket Groups by Event Id",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The Id of the Event to look up Ticket Groups",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "section",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "row",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "seat",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketGroupResource"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketGroupResource"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketGroupResource"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AirbillUploadRequest": {
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/UserDocumentFileRequest"
          }
        },
        "additionalProperties": false
      },
      "BaseListingResource": {
        "type": "object",
        "properties": {
          "eventMapping": {
            "$ref": "#/components/schemas/EventMappingResource"
          },
          "event": {
            "$ref": "#/components/schemas/EventResource"
          },
          "venue": {
            "$ref": "#/components/schemas/VenueResource"
          },
          "performer": {
            "$ref": "#/components/schemas/PerformerResource"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "inHandAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "seating": {
            "$ref": "#/components/schemas/SeatingResource"
          },
          "listingNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingNoteResource"
            },
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "unitCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "availableQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "maxDisplayQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "isPreDelivered": {
            "type": "boolean"
          },
          "splitType": {
            "$ref": "#/components/schemas/SplitType"
          },
          "splitTypeValue": {
            "type": "string",
            "nullable": true
          },
          "hideSeatsFromMarketplace": {
            "type": "boolean"
          },
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketResource"
            },
            "nullable": true
          },
          "instantTransfer": {
            "type": "boolean"
          },
          "faceValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "stockType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockTypeMapping"
            },
            "nullable": true
          },
          "internalNotes": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResource"
            },
            "nullable": true
          },
          "resourceVersion": {
            "type": "integer",
            "format": "int64"
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "totalCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "zoneFill": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "BulkInventoryCreateRequest": {
        "type": "object",
        "properties": {
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketRequest"
            },
            "nullable": true
          },
          "ticketSeating": {
            "$ref": "#/components/schemas/TicketSeatingRequest"
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "unitCost": {
            "type": "number",
            "format": "double"
          },
          "expectedValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "taxPaid": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "faceValueCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "deliveryType": {
            "type": "string",
            "description": "DeliveryType value:\r\n- InApp\r\n- PDF\r\n- Paper\r\n- WillCall\r\n- MemberCard",
            "nullable": true
          },
          "deliveryCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "event": {
            "$ref": "#/components/schemas/EventRequest"
          },
          "eventMapping": {
            "$ref": "#/components/schemas/EventMappingRequest"
          },
          "primaryEventId": {
            "type": "string",
            "description": "Primary Event Id is the event ID from the primary vendor. It is used to map the event quickly.",
            "nullable": true
          },
          "inHandAt": {
            "type": "string",
            "description": "Given a Sale can consist of tickets purchased at different times, this should be\r\nthe latest date that all tickets are in hand.  This is a seller-provided field\r\nand it does not have to coincide with listings or purchase orders.",
            "format": "date-time",
            "nullable": true
          },
          "seating": {
            "$ref": "#/components/schemas/PurchaseSeatingRequest"
          },
          "ticketCount": {
            "type": "integer",
            "description": "The number of tickets in this set.\r\n- For Sale, it would be the same as QuantitySold - but this is the physical number of allocated tickets.\r\n- For Listing for PO, it would just mean the number of tickets listed.",
            "format": "int32"
          },
          "listingNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingNoteRequest"
            },
            "description": "List of ListingNoteResource",
            "nullable": true
          },
          "autoBroadcast": {
            "type": "boolean",
            "description": "Autobroadcast listings after the purchase order is created",
            "nullable": true
          },
          "internalNotes": {
            "type": "string",
            "description": "Listing internal notes",
            "nullable": true
          },
          "preDeliveryState": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagRequest"
            },
            "description": "Developer specified tags",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkInventoryDeleteRequest": {
        "type": "object",
        "properties": {
          "inventoryId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "BulkInventoryRequest": {
        "type": "object",
        "properties": {
          "bulkProcessingId": {
            "type": "string",
            "format": "uuid"
          },
          "createRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkInventoryCreateRequest"
            },
            "nullable": true
          },
          "updateRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkInventoryUpdateRequest"
            },
            "nullable": true
          },
          "deleteRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkInventoryDeleteRequest"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkInventoryUpdateRequest": {
        "type": "object",
        "properties": {
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryPriceUpdateRequest"
            },
            "nullable": true
          },
          "broadcastStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryBroadcastUpdateRequest"
            },
            "nullable": true
          },
          "pricerUserId": {
            "type": "string",
            "description": "The person or pricing strategy whose currently pricing the tickets.",
            "format": "uuid",
            "nullable": true
          },
          "barcodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryBarcodeUpdateRequest"
            },
            "nullable": true
          },
          "ticketExternalIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryTicketExternalIdUpdateRequest"
            },
            "nullable": true
          },
          "ticketUrls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryTicketUrlUpdateRequest"
            },
            "nullable": true
          },
          "pricingSetting": {
            "$ref": "#/components/schemas/InventoryPricingSettingUpdateRequest"
          },
          "eTickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ETicketUploadRequest"
            },
            "description": "Pre-Upload ETickets",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagRequest"
            },
            "description": "Developer specified tags",
            "nullable": true
          },
          "internalNotes": {
            "type": "string",
            "description": "Private notes, not shared with marketplaces",
            "nullable": true
          },
          "marketplaceSeatingOverrides": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketplaceSeatingOverrideUpdateRequest"
            },
            "nullable": true
          },
          "proofOfOwnership": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileRequest"
            },
            "description": "Upload proof of ticket ownership",
            "nullable": true
          },
          "inHandAt": {
            "type": "string",
            "description": "The latest date that all tickets are in hand.",
            "nullable": true
          },
          "splitType": {
            "type": "string",
            "description": "How the inventory may be split.\r\nAllowable values:\r\n<br>\r\n- Any\r\n- None\r\n- AvoidOne\r\n- AvoidOneAndThree\r\n- Pairs\r\n",
            "nullable": true
          },
          "deliveryType": {
            "type": "string",
            "description": "How the inventory is delivered.\r\nAllowable values:\r\n<br>\r\n- InApp\r\n- PDF\r\n- Paper\r\n- WillCall\r\n- MemberCard\r\n",
            "nullable": true
          },
          "inventoryId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "BulkProcessingResult": {
        "type": "object",
        "properties": {
          "entityId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "error": {
            "$ref": "#/components/schemas/ErrorResource"
          }
        },
        "additionalProperties": false
      },
      "BulkProcessingResultSummaryResponse": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "finished": {
            "type": "boolean",
            "readOnly": true
          },
          "successful": {
            "type": "boolean",
            "readOnly": true
          },
          "queued": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkProcessingResult"
            },
            "nullable": true
          },
          "completed": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkProcessingResult"
            },
            "nullable": true
          },
          "failed": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkProcessingResult"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkUpdatePurchaseRequest": {
        "type": "object",
        "properties": {
          "bulkProcessingId": {
            "type": "string",
            "format": "uuid"
          },
          "updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceUpdatePurchaseRequest"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkUpdateSaleRequest": {
        "type": "object",
        "properties": {
          "bulkProcessingId": {
            "type": "string",
            "format": "uuid"
          },
          "updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceUpdateSaleRequest"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BuyerCommissionResource": {
        "type": "object",
        "properties": {
          "buyerUserId": {
            "type": "string",
            "format": "uuid"
          },
          "commissionPercentage": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CircuitBreakerSetting": {
        "type": "object",
        "properties": {
          "relativeCeiling": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "relativeFloor": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maxDiscountVelocityPercent": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "maxDiscountVelocityTicks": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "minCompListingCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompListingSetting": {
        "type": "object",
        "properties": {
          "compListingMode": {
            "type": "string",
            "nullable": true
          },
          "compListingFloor": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "compListingCeiling": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "quantityScoreAdjustmentEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "quantityScoreAdjustmentOverridesJson": {
            "type": "string",
            "nullable": true
          },
          "onlyForSameZoneEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "onlyForSelectedSectionsEnabled": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePurchaseOrderPaymentsRequest": {
        "type": "object",
        "properties": {
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchasePaymentRequest"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePurchaseOrderTicketGroupsRequest": {
        "type": "object",
        "properties": {
          "ticketGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketGroupRequest"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ETicketResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "ordinal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "row": {
            "type": "string",
            "nullable": true
          },
          "seat": {
            "type": "string",
            "nullable": true
          },
          "barcode": {
            "type": "string",
            "nullable": true
          },
          "ticketUrl": {
            "type": "string",
            "nullable": true
          },
          "externalTicketId": {
            "type": "string",
            "nullable": true
          },
          "listingId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "saleId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "holdId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "purchaseOrderId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "vendorAccountId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "commissionPercentage": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "buyerUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "unitCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "eTicket": {
            "$ref": "#/components/schemas/UserDocumentFileResource"
          }
        },
        "additionalProperties": false
      },
      "ETicketUploadRequest": {
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/UserDocumentFileRequest"
          },
          "ticketId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ErrorResource": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventInfoResource": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/EventResource"
          },
          "eventMapping": {
            "$ref": "#/components/schemas/EventMappingResource"
          }
        },
        "additionalProperties": false,
        "description": "EventInfoResource has all information about the Event"
      },
      "EventMappingRequest": {
        "type": "object",
        "properties": {
          "eventName": {
            "type": "string",
            "nullable": true
          },
          "eventDate": {
            "type": "string",
            "description": "Date and Time that the event start. Must be YYYY-MM-ddTHH:mm:ss format (e.g. 2000-01-01T12:00:00)",
            "nullable": true
          },
          "venueName": {
            "type": "string",
            "nullable": true
          },
          "isEventDateConfirmed": {
            "type": "boolean"
          },
          "eventNote": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "stateProvince": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "CountryCode must be in ISO format (e.g. US, CA, MX, etc.)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventMappingResource": {
        "type": "object",
        "properties": {
          "eventMappingId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "eventName": {
            "type": "string",
            "nullable": true
          },
          "eventDate": {
            "type": "string",
            "format": "date-time"
          },
          "venueName": {
            "type": "string",
            "nullable": true
          },
          "isEventDateConfirmed": {
            "type": "boolean"
          },
          "eventNote": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "stateProvince": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "posEventIds": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the Event",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EventResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "venue": {
            "type": "string",
            "nullable": true
          },
          "dateConfirmed": {
            "type": "boolean"
          },
          "timeConfirmed": {
            "type": "boolean"
          },
          "posEventIds": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FileRequest": {
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/UserDocumentFileRequest"
          }
        },
        "additionalProperties": false
      },
      "GoogleWalletUploadRequest": {
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/UserDocumentFileRequest"
          },
          "ticketId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HoldRequest": {
        "type": "object",
        "properties": {
          "inventoryId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "marketplace": {
            "type": "string",
            "nullable": true
          },
          "marketplaceSaleId": {
            "type": "string",
            "nullable": true
          },
          "marketplaceListingId": {
            "type": "string",
            "nullable": true
          },
          "seating": {
            "$ref": "#/components/schemas/SeatingRequest"
          },
          "totalNetProceeds": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "quantitySold": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "saleDate": {
            "type": "string",
            "description": "Date and Time in UTC. Must be YYYY-MM-ddTHH:mm:ss format (e.g. 2000-01-01T12:00:00)",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "DateTime UTC that the hold will expire. If not provided, default 24 hours would be use.\r\nMust be YYYY-MM-ddTHH:mm:ss format (e.g. 2000-01-01T12:00:00)\r\nThe expiration date must be at least 24 hours away from the current UTC time.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagRequest"
            },
            "description": "Developer specified tags",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HoldResource": {
        "type": "object",
        "properties": {
          "eventMapping": {
            "$ref": "#/components/schemas/EventMappingResource"
          },
          "event": {
            "$ref": "#/components/schemas/EventResource"
          },
          "venue": {
            "$ref": "#/components/schemas/VenueResource"
          },
          "performer": {
            "$ref": "#/components/schemas/PerformerResource"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "marketplaceSaleId": {
            "type": "string",
            "nullable": true
          },
          "marketplaceListingId": {
            "type": "string",
            "nullable": true
          },
          "inventoryId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "inHandAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "seating": {
            "$ref": "#/components/schemas/SeatingResource"
          },
          "totalNetProceeds": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "saleDate": {
            "type": "string",
            "format": "date-time"
          },
          "updateDate": {
            "type": "string",
            "format": "date-time"
          },
          "quantitySold": {
            "type": "integer",
            "format": "int32"
          },
          "marketplace": {
            "type": "string",
            "nullable": true
          },
          "stockType": {
            "type": "string",
            "nullable": true
          },
          "listingNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingNoteResource"
            },
            "nullable": true
          },
          "posState": {
            "$ref": "#/components/schemas/PosState"
          },
          "marketplaceState": {
            "$ref": "#/components/schemas/MarketplaceState"
          },
          "vendorInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorResource"
            },
            "nullable": true
          },
          "vendorAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseVendorAccountResource"
            },
            "nullable": true
          },
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketResource"
            },
            "nullable": true
          },
          "paymentStatus": {
            "type": "string",
            "nullable": true
          },
          "internalNotes": {
            "type": "string",
            "nullable": true
          },
          "ticketHolder": {
            "$ref": "#/components/schemas/TicketHolderResource"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResource"
            },
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "fulfillmentVersion": {
            "type": "integer",
            "format": "int32"
          },
          "marketplaceFulfillmentVersion": {
            "type": "integer",
            "format": "int32"
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "DateTime UTC that the hold will expire",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HoldUpdateRequest": {
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "string",
            "description": "DateTime UTC that the hold will expire\r\nMust be YYYY-MM-ddTHH:mm:ss format (e.g. 2000-01-01T12:00:00)",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagRequest"
            },
            "description": "Developer specified tags",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InventoryAssetResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ETicketResource"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InventoryBarcodeUpdateRequest": {
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "integer",
            "format": "int64"
          },
          "barcode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InventoryBroadcastUpdateRequest": {
        "type": "object",
        "properties": {
          "marketplace": {
            "type": "string",
            "description": "The name of the marketplace that the listing has been broadcasted or unbroadcasted",
            "nullable": true
          },
          "marketplaceBroadcastState": {
            "type": "string",
            "description": "MarketplaceBroadcastState is used to set whether the the listing has been broadcasted or unbroadcasted\r\n            \r\nPossible values:\r\n<br>\r\n- Delisted\r\n- Listed\r\n",
            "nullable": true
          },
          "posBroadcastState": {
            "type": "string",
            "description": "PosBroadcastState is used to set whether the the listing should be broadcasted or unbroadcasted\r\n            \r\nPossible values:\r\n<br>\r\n- Delist\r\n- List\r\n",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InventoryCreateRequest": {
        "type": "object",
        "properties": {
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketRequest"
            },
            "nullable": true
          },
          "ticketSeating": {
            "$ref": "#/components/schemas/TicketSeatingRequest"
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "unitCost": {
            "type": "number",
            "format": "double"
          },
          "expectedValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "taxPaid": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "faceValueCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "deliveryType": {
            "type": "string",
            "description": "DeliveryType value:\r\n- InApp\r\n- PDF\r\n- Paper\r\n- WillCall\r\n- MemberCard",
            "nullable": true
          },
          "deliveryCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "event": {
            "$ref": "#/components/schemas/EventRequest"
          },
          "eventMapping": {
            "$ref": "#/components/schemas/EventMappingRequest"
          },
          "primaryEventId": {
            "type": "string",
            "description": "Primary Event Id is the event ID from the primary vendor. It is used to map the event quickly.",
            "nullable": true
          },
          "inHandAt": {
            "type": "string",
            "description": "Given a Sale can consist of tickets purchased at different times, this should be\r\nthe latest date that all tickets are in hand.  This is a seller-provided field\r\nand it does not have to coincide with listings or purchase orders.",
            "format": "date-time",
            "nullable": true
          },
          "seating": {
            "$ref": "#/components/schemas/PurchaseSeatingRequest"
          },
          "ticketCount": {
            "type": "integer",
            "description": "The number of tickets in this set.\r\n- For Sale, it would be the same as QuantitySold - but this is the physical number of allocated tickets.\r\n- For Listing for PO, it would just mean the number of tickets listed.",
            "format": "int32"
          },
          "listingNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingNoteRequest"
            },
            "description": "List of ListingNoteResource",
            "nullable": true
          },
          "autoBroadcast": {
            "type": "boolean",
            "description": "Autobroadcast listings after the purchase order is created",
            "nullable": true
          },
          "internalNotes": {
            "type": "string",
            "description": "Listing internal notes",
            "nullable": true
          },
          "preDeliveryState": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagRequest"
            },
            "description": "Developer specified tags",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InventoryExportResource": {
        "type": "object",
        "properties": {
          "inventory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingResource"
            },
            "nullable": true
          },
          "deletedInventoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          },
          "paginationToken": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "numberOfItems": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InventoryPriceHistoryExportResource": {
        "type": "object",
        "properties": {
          "priceHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryPriceHistoryResource"
            },
            "nullable": true
          },
          "paginationToken": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "numberOfItems": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InventoryPriceHistoryResource": {
        "type": "object",
        "properties": {
          "listPrice": {
            "type": "number",
            "description": "ListPrice is UnitPrice",
            "format": "double"
          },
          "currencyCode": {
            "type": "string",
            "description": "ISO CurrencyCode (3 digits)",
            "nullable": true
          },
          "priceDate": {
            "type": "string",
            "description": "Date and Time when the inventory price is updated",
            "format": "date-time"
          },
          "marketplace": {
            "type": "string",
            "description": "Marketplace to be updated with the ListPrice",
            "nullable": true
          },
          "pricerUserId": {
            "type": "string",
            "description": "UserId of the Pricer",
            "format": "uuid",
            "nullable": true
          },
          "applicationName": {
            "type": "string",
            "description": "The name of the application that Pricer use to update ListPrice (i.e. POS Website, POS API, etc.)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InventoryPriceUpdateRequest": {
        "type": "object",
        "properties": {
          "allInPrice": {
            "type": "number",
            "description": "AllInPrice is the broadcasted price with taxes / fees",
            "format": "double",
            "nullable": true
          },
          "listPrice": {
            "type": "number",
            "description": "ListPrice is unit price",
            "format": "double",
            "nullable": true
          },
          "marketplace": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InventoryPricingSettingUpdateRequest": {
        "type": "object",
        "properties": {
          "pricingEnabled": {
            "type": "boolean",
            "description": "Flag to control whether Pricing should be enabled for the current listing.",
            "nullable": true
          },
          "netProceedsFloor": {
            "type": "number",
            "description": "The minimum amount inventory can be priced at. Certain users can price below the floor if a warning is accepted.",
            "format": "double",
            "nullable": true
          },
          "netProceedsCeiling": {
            "type": "number",
            "description": "The maximum amount inventory can be priced at. Certain users can price above the ceiling if a warning is accepted.",
            "format": "double",
            "nullable": true
          },
          "undercutMode": {
            "type": "string",
            "description": "<br>\r\n            - Simple\r\n            - RowExtrapolation\r\n            ",
            "nullable": true
          },
          "undercutAbsoluteAmount": {
            "type": "number",
            "description": "Default amount to price under a comparable listing in the currency unit of the listing. Applied after UndercutRelativeAmount.",
            "format": "double",
            "nullable": true
          },
          "undercutRelativeAmount": {
            "type": "number",
            "description": "Default precent to price under a comparable listing. Applied before UndercutRelativeAmount.",
            "format": "double",
            "nullable": true
          },
          "compListingMode": {
            "type": "string",
            "description": "Mode to be used for comparable listings.\r\n<br>\r\n- QualityScore\r\n- SameSection\r\n- SameZone\r\n- SameEvent\r\n",
            "nullable": true
          },
          "compListingFloor": {
            "type": "number",
            "description": "Sets the minimum quality of listings that we be used for comparable listings.",
            "format": "double",
            "nullable": true
          },
          "compListingCeiling": {
            "type": "number",
            "description": "Sets the minimum quality of listings that we be used for comparable listings.",
            "format": "double",
            "nullable": true
          },
          "quantityScoreAdjustmentEnabled": {
            "type": "boolean",
            "description": "Flag to control whether quantity score adjustment should be enabled for the listing.",
            "nullable": true
          },
          "quantityScoreAdjustmentOverridesJson": {
            "type": "string",
            "description": "Sets the overrides json for the quantity score adjustment.,",
            "nullable": true
          },
          "onlyForSameZoneEnabled": {
            "type": "boolean",
            "description": "Flag to control whether its only enabled for the same zone.",
            "nullable": true
          },
          "onlyForSelectedSectionsEnabled": {
            "type": "boolean",
            "description": "Flag to control whether its only enabled for the selected sections.",
            "nullable": true
          },
          "outlierMode": {
            "type": "string",
            "description": "Mode to be used for outlier.\r\n<br>\r\n- StandardDeviations\r\n",
            "nullable": true
          },
          "standardDeviations": {
            "type": "number",
            "description": "Sets the number of standard deviations to use for outlier settings.",
            "format": "double",
            "nullable": true
          },
          "maxDiscountVelocityPercent": {
            "type": "number",
            "description": "Sets the max discount velocity percent for the circuit breaker.",
            "format": "double",
            "nullable": true
          },
          "maxDiscountVelocityTicks": {
            "type": "integer",
            "description": "Sets the max discount velocity ticks for the circuit breaker.",
            "format": "int64",
            "nullable": true
          },
          "minCompListingCount": {
            "type": "integer",
            "description": "Sets the minimum quality of listings that we be used for comparable listings.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InventoryTicketExternalIdUpdateRequest": {
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "integer",
            "format": "int64"
          },
          "ticketExternalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InventoryTicketUrlUpdateRequest": {
        "type": "object",
        "properties": {
          "ticketId": {
            "type": "integer",
            "format": "int64"
          },
          "ticketUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InventoryUpdatePricesRequest": {
        "type": "object",
        "properties": {
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryPriceUpdateRequest"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InventoryUpdateRequest": {
        "type": "object",
        "properties": {
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryPriceUpdateRequest"
            },
            "nullable": true
          },
          "broadcastStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryBroadcastUpdateRequest"
            },
            "nullable": true
          },
          "pricerUserId": {
            "type": "string",
            "description": "The person or pricing strategy whose currently pricing the tickets.",
            "format": "uuid",
            "nullable": true
          },
          "barcodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryBarcodeUpdateRequest"
            },
            "nullable": true
          },
          "ticketExternalIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryTicketExternalIdUpdateRequest"
            },
            "nullable": true
          },
          "ticketUrls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryTicketUrlUpdateRequest"
            },
            "nullable": true
          },
          "pricingSetting": {
            "$ref": "#/components/schemas/InventoryPricingSettingUpdateRequest"
          },
          "eTickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ETicketUploadRequest"
            },
            "description": "Pre-Upload ETickets",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagRequest"
            },
            "description": "Developer specified tags",
            "nullable": true
          },
          "internalNotes": {
            "type": "string",
            "description": "Private notes, not shared with marketplaces",
            "nullable": true
          },
          "marketplaceSeatingOverrides": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketplaceSeatingOverrideUpdateRequest"
            },
            "nullable": true
          },
          "proofOfOwnership": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileRequest"
            },
            "description": "Upload proof of ticket ownership",
            "nullable": true
          },
          "inHandAt": {
            "type": "string",
            "description": "The latest date that all tickets are in hand.",
            "nullable": true
          },
          "splitType": {
            "type": "string",
            "description": "How the inventory may be split.\r\nAllowable values:\r\n<br>\r\n- Any\r\n- None\r\n- AvoidOne\r\n- AvoidOneAndThree\r\n- Pairs\r\n",
            "nullable": true
          },
          "deliveryType": {
            "type": "string",
            "description": "How the inventory is delivered.\r\nAllowable values:\r\n<br>\r\n- InApp\r\n- PDF\r\n- Paper\r\n- WillCall\r\n- MemberCard\r\n",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvoiceLineItemsExportResource": {
        "type": "object",
        "properties": {
          "invoiceLineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaleLineItemResource"
            },
            "nullable": true
          },
          "paginationToken": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "numberOfItems": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvoicesExportResource": {
        "type": "object",
        "properties": {
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaleResource"
            },
            "nullable": true
          },
          "paginationToken": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "numberOfItems": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxCreatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListingNoteRequest": {
        "type": "object",
        "properties": {
          "note": {
            "type": "string",
            "nullable": true
          },
          "untranslatedNote": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListingNoteResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "untranslatedNote": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListingResource": {
        "type": "object",
        "properties": {
          "eventMapping": {
            "$ref": "#/components/schemas/EventMappingResource"
          },
          "event": {
            "$ref": "#/components/schemas/EventResource"
          },
          "venue": {
            "$ref": "#/components/schemas/VenueResource"
          },
          "performer": {
            "$ref": "#/components/schemas/PerformerResource"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "inHandAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "seating": {
            "$ref": "#/components/schemas/SeatingResource"
          },
          "listingNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingNoteResource"
            },
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "unitCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "availableQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "maxDisplayQuantity": {
            "type": "integer",
            "format": "int32"
          },
          "isPreDelivered": {
            "type": "boolean"
          },
          "splitType": {
            "$ref": "#/components/schemas/SplitType"
          },
          "splitTypeValue": {
            "type": "string",
            "nullable": true
          },
          "hideSeatsFromMarketplace": {
            "type": "boolean"
          },
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketResource"
            },
            "nullable": true
          },
          "instantTransfer": {
            "type": "boolean"
          },
          "faceValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "stockType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockTypeMapping"
            },
            "nullable": true
          },
          "internalNotes": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResource"
            },
            "nullable": true
          },
          "resourceVersion": {
            "type": "integer",
            "format": "int64"
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "totalCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "zoneFill": {
            "type": "boolean"
          },
          "listingPricesByMarketplace": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketplacePricingInfo"
            },
            "nullable": true
          },
          "listingStatusByMarketplace": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketplaceListingStatus"
            },
            "nullable": true
          },
          "seatingOverridesByMarketplace": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketplaceSeatingOverrideInfo"
            },
            "nullable": true
          },
          "pricerUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "pricingSetting": {
            "$ref": "#/components/schemas/PricingSetting"
          },
          "isBroadcast": {
            "type": "boolean"
          },
          "lastPriceUpdatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MarketplaceListingStatus": {
        "type": "object",
        "properties": {
          "listingStatus": {
            "type": "string",
            "nullable": true
          },
          "marketplaceBroadcastState": {
            "type": "string",
            "nullable": true
          },
          "posBroadcastState": {
            "type": "string",
            "nullable": true
          },
          "marketplaceName": {
            "type": "string",
            "nullable": true
          },
          "marketplaceListingId": {
            "type": "string",
            "nullable": true
          },
          "marketPlaceEventIdOverride": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MarketplacePricingInfo": {
        "type": "object",
        "properties": {
          "allInPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "listPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "marketplaceName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MarketplaceSeatingOverrideInfo": {
        "type": "object",
        "properties": {
          "marketplace": {
            "type": "string",
            "nullable": true
          },
          "section": {
            "type": "string",
            "nullable": true
          },
          "row": {
            "type": "string",
            "nullable": true
          },
          "seats": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MarketplaceSeatingOverrideUpdateRequest": {
        "type": "object",
        "properties": {
          "marketplace": {
            "type": "string",
            "description": "External marketplace name",
            "nullable": true
          },
          "section": {
            "type": "string",
            "description": "Section override info",
            "nullable": true
          },
          "row": {
            "type": "string",
            "description": "Row override info",
            "nullable": true
          },
          "seats": {
            "type": "string",
            "description": "Seat override info. May contain mulitple seats as a comma separated list.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MarketplaceState": {
        "type": "object",
        "properties": {
          "fullfilmentState": {
            "type": "string",
            "nullable": true
          },
          "paymentState": {
            "type": "string",
            "nullable": true
          },
          "contractState": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MergeInventoryRequest": {
        "type": "object",
        "properties": {
          "inventoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "List of inventory ids to be merged into one single inventory",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OutlierSetting": {
        "type": "object",
        "properties": {
          "outlierMode": {
            "type": "string",
            "nullable": true
          },
          "standardDeviations": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PKPassUploadRequest": {
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/UserDocumentFileRequest"
          },
          "ticketId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentMethodExportResource": {
        "type": "object",
        "properties": {
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchasePaymentMethodResource"
            },
            "nullable": true
          },
          "numberOfItems": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PerformerResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "genreName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PosState": {
        "type": "object",
        "properties": {
          "fullfilmentState": {
            "type": "string",
            "nullable": true
          },
          "allocationState": {
            "type": "string",
            "nullable": true
          },
          "saleStatus": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PricingSetting": {
        "type": "object",
        "properties": {
          "pricingEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "netProceedsFloor": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "netProceedsCeiling": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "underCutSetting": {
            "$ref": "#/components/schemas/UnderCutSetting"
          },
          "compListingSetting": {
            "$ref": "#/components/schemas/CompListingSetting"
          },
          "outlierSetting": {
            "$ref": "#/components/schemas/OutlierSetting"
          },
          "circuitBreakerSetting": {
            "$ref": "#/components/schemas/CircuitBreakerSetting"
          },
          "marketPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "resultState": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseCostResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "costType": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderCostRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "costType": {
            "type": "string",
            "description": "CostType values:\r\n- Tax\r\n- Shipping\r\n- CreditCardFee\r\n- BulkDiscount",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "ISO format (YYYY-MM-DD)",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderRequest": {
        "type": "object",
        "properties": {
          "vendorName": {
            "type": "string",
            "nullable": true
          },
          "vendorAccount": {
            "$ref": "#/components/schemas/VendorAccountRequest"
          },
          "secondaryVendorName": {
            "type": "string",
            "nullable": true
          },
          "secondaryVendorAccount": {
            "$ref": "#/components/schemas/VendorAccountRequest"
          },
          "purchaseDate": {
            "type": "string",
            "description": "ISO format (YYYY-MM-DDThh:mm:ss). Unless other specified, timestamp\r\nwill be interpreted as UTC",
            "nullable": true
          },
          "vendorOrderId": {
            "type": "string",
            "nullable": true
          },
          "ticketGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketGroupRequest"
            },
            "nullable": true
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchasePaymentRequest"
            },
            "nullable": true
          },
          "paymentStatus": {
            "type": "string",
            "description": "PaymentStatus value:\r\n- Unpaid\r\n- PartiallyPaid\r\n- Paid\r\n- Failed\r\n- RefundNeeded",
            "nullable": true
          },
          "additionalCosts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderCostRequest"
            },
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "internalNotes": {
            "type": "string",
            "description": "Private notes, not shared with marketplaces",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagRequest"
            },
            "description": "Developer specified tags",
            "nullable": true
          },
          "qualityControlState": {
            "type": "string",
            "description": "(Experimental flag) To create purchase order with preset QualityControlState with values:\r\n<br>\r\n- Pending\r\n- Approved\r\n- Rejected\r\n",
            "nullable": true,
            "readOnly": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderUpdateCostRequest": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "costType": {
            "type": "string",
            "description": "CostType values:\r\n- Tax\r\n- Shipping\r\n- CreditCardFee\r\n- BulkDiscount",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "ISO format (YYYY-MM-DD)",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Cost Id. Must match existing AdditionalCosts in the Purchase",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderUpdateRequest": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "State to update the Purchase Order to\r\nOnly acceptable values are [\"CANCELLED\"]",
            "nullable": true
          },
          "additionalCosts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderUpdateCostRequest"
            },
            "description": "To update existing AdditionalCosts.",
            "nullable": true
          },
          "ticketGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderUpdateTicketGroupRequest"
            },
            "description": "To update existing TicketGroups.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagRequest"
            },
            "description": "Developer specified tags",
            "nullable": true
          },
          "changeReason": {
            "type": "string",
            "description": "The reason why the PurchaseOrder is updated. The max length is 1000 characters.",
            "nullable": true
          },
          "vendorOrderId": {
            "type": "string",
            "nullable": true
          },
          "vendorAccount": {
            "$ref": "#/components/schemas/PurchaseOrderVendorUpdateRequest"
          },
          "secondaryVendorAccount": {
            "$ref": "#/components/schemas/PurchaseOrderVendorUpdateRequest"
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderUpdateTicketGroupRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "TicketGroup Id. Must match existing TicketGroups in the Purchase",
            "format": "int64",
            "nullable": true
          },
          "deliveryType": {
            "type": "string",
            "description": "DeliveryType value:\r\n- InApp\r\n- PDF\r\n- Paper\r\n- WillCall\r\n- MemberCard",
            "nullable": true
          },
          "inHandAt": {
            "type": "string",
            "description": "Given a Sale can consist of tickets purchased at different times, this should be\r\nthe latest date that all tickets are in hand.  This is a seller-provided field\r\nand it does not have to coincide with listings or purchase orders.",
            "nullable": true
          },
          "listingNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingNoteRequest"
            },
            "description": "Updated ListingNotes. This will replace the existing ListingNotes in the Purchase",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderVendorAccountCreateRequest": {
        "type": "object",
        "properties": {
          "vendorAccountName": {
            "type": "string",
            "nullable": true
          },
          "encryptedEmailAddress": {
            "type": "string",
            "nullable": true
          },
          "purchaseOrderVendorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderVendorAccountUpdateRequest": {
        "type": "object",
        "properties": {
          "vendorAccountName": {
            "type": "string",
            "nullable": true
          },
          "encryptedEmailAddress": {
            "type": "string",
            "nullable": true
          },
          "purchaseOrderVendorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseOrderVendorUpdateRequest": {
        "type": "object",
        "properties": {
          "vendorAccountId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "PurchasePaymentMethodResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "hashedPaymentMethod": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchasePaymentMethodResourceRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of previously created payment method. Or leave empty if want to create a new PaymentMethod",
            "format": "int32",
            "nullable": true
          },
          "display": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Available PaymentMethodType:\r\n- PayPal\r\n- eCheck\r\n- Check\r\n- MoneyOrder\r\n- Card\r\n- Cash\r\n- Credit\r\n- COD\r\n- BankTransfer\r\n- DebitCard\r\n- CreditMemo\r\n- DebitNote\r\n- Other",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchasePaymentRequest": {
        "type": "object",
        "properties": {
          "paymentStatus": {
            "type": "string",
            "description": "PaymentStatus value:\r\n- Unpaid\r\n- PartiallyPaid\r\n- Paid\r\n- Failed\r\n- RefundNeeded",
            "nullable": true
          },
          "paymentDueDate": {
            "type": "string",
            "description": "ISO format (YYYY-MM-DD)",
            "nullable": true
          },
          "paymentDate": {
            "type": "string",
            "description": "ISO format (YYYY-MM-DD)",
            "nullable": true
          },
          "paymentAmount": {
            "type": "number",
            "format": "double"
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PurchasePaymentMethodResourceRequest"
          }
        },
        "additionalProperties": false
      },
      "PurchasePaymentResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "paymentStatus": {
            "type": "string",
            "nullable": true
          },
          "paymentDueDate": {
            "type": "string",
            "format": "date-time"
          },
          "paymentDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "paymentAmount": {
            "type": "number",
            "format": "double"
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PurchasePaymentMethodResource"
          },
          "purchaseAmountInPaymentCurrency": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PurchaseResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "vendorOrderId": {
            "type": "string",
            "nullable": true
          },
          "purchaseDate": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "internalNotes": {
            "type": "string",
            "nullable": true
          },
          "vendorAccount": {
            "$ref": "#/components/schemas/PurchaseVendorAccountResource"
          },
          "secondaryVendorAccount": {
            "$ref": "#/components/schemas/PurchaseVendorAccountResource"
          },
          "additionalCosts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseCostResource"
            },
            "nullable": true
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchasePaymentResource"
            },
            "nullable": true
          },
          "ticketGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketGroupResource"
            },
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResource"
            },
            "nullable": true
          },
          "totalAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "paymentStatus": {
            "type": "string",
            "nullable": true
          },
          "changeReason": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "commissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BuyerCommissionResource"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseSeatingRequest": {
        "type": "object",
        "properties": {
          "section": {
            "type": "string",
            "nullable": true
          },
          "row": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseVendorAccountResource": {
        "type": "object",
        "properties": {
          "vendorAccountName": {
            "type": "string",
            "nullable": true
          },
          "vendorAccountEmail": {
            "type": "string",
            "nullable": true
          },
          "vendorAccountId": {
            "type": "string",
            "format": "uuid"
          },
          "vendor": {
            "$ref": "#/components/schemas/PurchaseVendorResource"
          }
        },
        "additionalProperties": false
      },
      "PurchaseVendorAccountsExportResource": {
        "type": "object",
        "properties": {
          "vendorAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseVendorAccountResource"
            },
            "nullable": true
          },
          "numberOfItems": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseVendorResource": {
        "type": "object",
        "properties": {
          "vendorId": {
            "type": "integer",
            "format": "int32"
          },
          "vendorName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchasesExportResource": {
        "type": "object",
        "properties": {
          "purchases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseResource"
            },
            "nullable": true
          },
          "paginationToken": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "numberOfItems": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaleAssetResource": {
        "type": "object",
        "properties": {
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ETicketResource"
            },
            "nullable": true
          },
          "ticketHolder": {
            "$ref": "#/components/schemas/TicketHolderResource"
          },
          "transferUrls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "transferDocs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDocumentFileResource"
            },
            "nullable": true
          },
          "stockType": {
            "type": "string",
            "description": "StockType available value:\r\n<br>\r\n    Paper\r\n    ETicket\r\n    TesseraDlTifoso\r\n    SeasonTicketCardExchange\r\n    PaperNameChange\r\n    ETicketNameChange\r\n    ETicketThirdPartyPreUpload\r\n    ReservationCode_FacevalueNotPaid\r\n    ReservationCode_FacevaluePaid\r\n    FlashseatsTicketTransfer\r\n    TicketMasterMobile\r\n    ETicketUrl\r\n    WalkIn\r\n    QRCode\r\n    FlashMobileDeliveryAXS\r\n    UEFAMobileTransfer\r\n    GenericMobileTransfer\r\n    PassoligTransfer\r\n    SeasonCardELS\r\n    ThirdPartyAppTransfer\r\n    BarcodeMobile\r\n",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "shipment": {
            "$ref": "#/components/schemas/SaleShipmentResource"
          }
        },
        "additionalProperties": false
      },
      "SaleCreateRequest": {
        "type": "object",
        "properties": {
          "inventoryId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "marketplace": {
            "type": "string",
            "nullable": true
          },
          "saleDate": {
            "type": "string",
            "description": "Date and Time in UTC. Must be YYYY-MM-ddTHH:mm:ss format (e.g. 2000-01-01T12:00:00)",
            "nullable": true
          },
          "inHandAt": {
            "type": "string",
            "nullable": true
          },
          "marketplaceSaleId": {
            "type": "string",
            "nullable": true
          },
          "marketplaceListingId": {
            "type": "string",
            "nullable": true
          },
          "seating": {
            "$ref": "#/components/schemas/SeatingRequest"
          },
          "totalNetProceeds": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "quantitySold": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ticketHolder": {
            "$ref": "#/components/schemas/TicketHolderRequest"
          },
          "shipment": {
            "$ref": "#/components/schemas/SaleShipmentResource"
          },
          "internalNotes": {
            "type": "string",
            "description": "Private notes, not shared with marketplaces",
            "nullable": true
          },
          "holdId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagRequest"
            },
            "description": "Developer specified tags",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaleLineItemCreateRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The current Status of this line item.  Current valid values are: \"Paid\", and \"Unpaid\"",
            "nullable": true
          },
          "costType": {
            "type": "string",
            "description": "The type of Cost associated with this line item.  Current valid values are \"Credit\", and \"Charge\"",
            "nullable": true
          },
          "costDate": {
            "type": "string",
            "format": "date-time"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time"
          },
          "cost": {
            "type": "number",
            "format": "double"
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaleLineItemResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "saleId": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "costType": {
            "type": "string",
            "nullable": true
          },
          "costDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cost": {
            "type": "number",
            "format": "double"
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaleLineItemUpdateRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The current Status of this line item.  Current valid values are: \"Paid\", and \"Unpaid\"",
            "nullable": true
          },
          "costType": {
            "type": "string",
            "description": "The type of Cost associated with this line item.  Current valid values are \"Credit\", and \"Charge\"",
            "nullable": true
          },
          "costDate": {
            "type": "string",
            "format": "date-time"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time"
          },
          "cost": {
            "type": "number",
            "format": "double"
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaleResource": {
        "type": "object",
        "properties": {
          "eventMapping": {
            "$ref": "#/components/schemas/EventMappingResource"
          },
          "event": {
            "$ref": "#/components/schemas/EventResource"
          },
          "venue": {
            "$ref": "#/components/schemas/VenueResource"
          },
          "performer": {
            "$ref": "#/components/schemas/PerformerResource"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "marketplaceSaleId": {
            "type": "string",
            "nullable": true
          },
          "marketplaceListingId": {
            "type": "string",
            "nullable": true
          },
          "inventoryId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "inHandAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "seating": {
            "$ref": "#/components/schemas/SeatingResource"
          },
          "totalNetProceeds": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "saleDate": {
            "type": "string",
            "format": "date-time"
          },
          "updateDate": {
            "type": "string",
            "format": "date-time"
          },
          "quantitySold": {
            "type": "integer",
            "format": "int32"
          },
          "marketplace": {
            "type": "string",
            "nullable": true
          },
          "stockType": {
            "type": "string",
            "nullable": true
          },
          "listingNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingNoteResource"
            },
            "nullable": true
          },
          "posState": {
            "$ref": "#/components/schemas/PosState"
          },
          "marketplaceState": {
            "$ref": "#/components/schemas/MarketplaceState"
          },
          "vendorInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorResource"
            },
            "nullable": true
          },
          "vendorAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseVendorAccountResource"
            },
            "nullable": true
          },
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketResource"
            },
            "nullable": true
          },
          "paymentStatus": {
            "type": "string",
            "nullable": true
          },
          "internalNotes": {
            "type": "string",
            "nullable": true
          },
          "ticketHolder": {
            "$ref": "#/components/schemas/TicketHolderResource"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResource"
            },
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "fulfillmentVersion": {
            "type": "integer",
            "format": "int32"
          },
          "marketplaceFulfillmentVersion": {
            "type": "integer",
            "format": "int32"
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaleShipmentResource": {
        "type": "object",
        "properties": {
          "trackingNumber": {
            "type": "string",
            "description": "Used to track paper tickets physically shipped to buyers",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaleUpdateRequest": {
        "type": "object",
        "properties": {
          "fullfilmentState": {
            "type": "string",
            "nullable": true
          },
          "paymentState": {
            "type": "string",
            "description": "Marketplace payment state of the sale\r\n<br>\r\n    Ineligible\r\n    Unpaid\r\n    Queued\r\n    Paid\r\n",
            "nullable": true
          },
          "contractState": {
            "type": "string",
            "description": "Marketplace contract state of the sale\r\n<br>\r\n    Provisional\r\n    CancelledProvisional\r\n    Contracted\r\n    MarketplaceDispute\r\n    Complete\r\n    CancelledUnknownFault\r\n    CancelledSellerFault\r\n    CancelledMutual\r\n    CancelledMarketplaceFault\r\n",
            "nullable": true
          },
          "internalNotes": {
            "type": "string",
            "description": "Private notes, not shared with marketplaces",
            "nullable": true
          },
          "shipment": {
            "$ref": "#/components/schemas/SaleShipmentResource"
          },
          "ticketHolder": {
            "$ref": "#/components/schemas/TicketHolderRequest"
          },
          "eTickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ETicketUploadRequest"
            },
            "description": "Fulfill sale with ETickets",
            "nullable": true
          },
          "pkPassTickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PKPassUploadRequest"
            },
            "description": "Fulfill sale with an Apple iPhone PK Pass",
            "nullable": true
          },
          "googleWalletTickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoogleWalletUploadRequest"
            },
            "description": "Fulfill sale with a Google Wallet pass",
            "nullable": true
          },
          "airbill": {
            "$ref": "#/components/schemas/AirbillUploadRequest"
          },
          "transferProofUploadRequest": {
            "$ref": "#/components/schemas/TransferProofUploadRequest"
          },
          "transferProofUrls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagRequest"
            },
            "description": "Developer specified tags",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchListingsResponse": {
        "type": "object",
        "properties": {
          "nextPaginationToken": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingResource"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SeatingRequest": {
        "type": "object",
        "properties": {
          "section": {
            "type": "string",
            "nullable": true
          },
          "row": {
            "type": "string",
            "nullable": true
          },
          "piggybackRow": {
            "type": "string",
            "nullable": true
          },
          "seatFrom": {
            "type": "string",
            "nullable": true
          },
          "seatTo": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SeatingResource": {
        "type": "object",
        "properties": {
          "section": {
            "type": "string",
            "nullable": true
          },
          "row": {
            "type": "string",
            "nullable": true
          },
          "piggybackRow": {
            "type": "string",
            "nullable": true
          },
          "seatFrom": {
            "type": "string",
            "nullable": true
          },
          "seatTo": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SellerAccountResource": {
        "type": "object",
        "properties": {
          "sellerAccountId": {
            "type": "string",
            "format": "uuid"
          },
          "sellerAccountName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SellerUserResource": {
        "type": "object",
        "properties": {
          "sellerUserId": {
            "type": "string",
            "format": "uuid"
          },
          "sellerEmail": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ServiceUpdatePurchaseRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "internalNotes": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ServiceUpdateSaleRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "internalNotes": {
            "type": "string",
            "nullable": true
          },
          "ticketType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SplitInventoryRequest": {
        "type": "object",
        "properties": {
          "splitInventoryTicketsRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SplitInventoryTicketsRequest"
            },
            "description": "List of tickets to be in the same inventory or ticket group",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SplitInventoryTicketsRequest": {
        "type": "object",
        "properties": {
          "ticketIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "List of ticketIds to be in the same inventory after the split",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SplitType": {
        "enum": [
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "StockTypeMapping": {
        "type": "object",
        "properties": {
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "stockType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TagRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Tag name to be associated with a listing, sale, or purchase order",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Stringified JSON array of values associated to the tag name. The string\r\nJSON array length must not exceed 2000 characters",
            "nullable": true
          },
          "valueDataType": {
            "type": "string",
            "description": "Specifies the type of the values\r\n            \r\nPossible values:\r\n<br>\r\n- String\r\n- Decimal\r\n- Int\r\n- Boolean\r\n- Json\r\n",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TagResource": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "valueDataType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TicketGroupRequest": {
        "type": "object",
        "properties": {
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketRequest"
            },
            "nullable": true
          },
          "ticketSeating": {
            "$ref": "#/components/schemas/TicketSeatingRequest"
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "unitCost": {
            "type": "number",
            "format": "double"
          },
          "expectedValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "taxPaid": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "faceValueCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "deliveryType": {
            "type": "string",
            "description": "DeliveryType value:\r\n- InApp\r\n- PDF\r\n- Paper\r\n- WillCall\r\n- MemberCard",
            "nullable": true
          },
          "deliveryCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "event": {
            "$ref": "#/components/schemas/EventRequest"
          },
          "eventMapping": {
            "$ref": "#/components/schemas/EventMappingRequest"
          },
          "primaryEventId": {
            "type": "string",
            "description": "Primary Event Id is the event ID from the primary vendor. It is used to map the event quickly.",
            "nullable": true
          },
          "inHandAt": {
            "type": "string",
            "description": "Given a Sale can consist of tickets purchased at different times, this should be\r\nthe latest date that all tickets are in hand.  This is a seller-provided field\r\nand it does not have to coincide with listings or purchase orders.",
            "format": "date-time",
            "nullable": true
          },
          "seating": {
            "$ref": "#/components/schemas/PurchaseSeatingRequest"
          },
          "ticketCount": {
            "type": "integer",
            "description": "The number of tickets in this set.\r\n- For Sale, it would be the same as QuantitySold - but this is the physical number of allocated tickets.\r\n- For Listing for PO, it would just mean the number of tickets listed.",
            "format": "int32"
          },
          "listingNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingNoteRequest"
            },
            "description": "List of ListingNoteResource",
            "nullable": true
          },
          "autoBroadcast": {
            "type": "boolean",
            "description": "Autobroadcast listings after the purchase order is created",
            "nullable": true
          },
          "internalNotes": {
            "type": "string",
            "description": "Listing internal notes",
            "nullable": true
          },
          "preDeliveryState": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TicketGroupResource": {
        "type": "object",
        "properties": {
          "eventMapping": {
            "$ref": "#/components/schemas/EventMappingResource"
          },
          "event": {
            "$ref": "#/components/schemas/EventResource"
          },
          "venue": {
            "$ref": "#/components/schemas/VenueResource"
          },
          "performer": {
            "$ref": "#/components/schemas/PerformerResource"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "inHandAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "seating": {
            "$ref": "#/components/schemas/SeatingResource"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "listingNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingNoteResource"
            },
            "nullable": true
          },
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketResource"
            },
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "unitCost": {
            "type": "number",
            "format": "double"
          },
          "totalCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "expectedValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "taxPaid": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "isFaceValueCost": {
            "type": "boolean",
            "nullable": true
          },
          "faceValueCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "deliveryType": {
            "type": "string",
            "nullable": true
          },
          "deliveryCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TicketGroupUpdateRequest": {
        "type": "object",
        "properties": {
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketUpdateRequest"
            },
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "nullable": true
          },
          "unitCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "expectedValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "taxPaid": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "faceValueCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "deliveryType": {
            "type": "string",
            "description": "DeliveryType value:\r\n- InApp\r\n- PDF\r\n- Paper\r\n- WillCall\r\n- MemberCard",
            "nullable": true
          },
          "deliveryCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "inHandAt": {
            "type": "string",
            "description": "Given a Sale can consist of tickets purchased at different times, this should be\r\nthe latest date that all tickets are in hand.  This is a seller-provided field\r\nand it does not have to coincide with listings or purchase orders.",
            "format": "date-time",
            "nullable": true
          },
          "seating": {
            "$ref": "#/components/schemas/PurchaseSeatingRequest"
          },
          "ticketCount": {
            "type": "integer",
            "description": "The number of tickets in this set.\r\n- For Sale, it would be the same as QuantitySold - but this is the physical number of allocated tickets.\r\n- For Listing for PO, it would just mean the number of tickets listed.",
            "format": "int32",
            "nullable": true
          },
          "listingNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingNoteRequest"
            },
            "description": "List of ListingNoteResource",
            "nullable": true
          },
          "autoBroadcast": {
            "type": "boolean",
            "description": "Autobroadcast listings after the purchase order is created",
            "nullable": true
          },
          "internalNotes": {
            "type": "string",
            "description": "Listing internal notes",
            "nullable": true
          },
          "event": {
            "$ref": "#/components/schemas/EventRequest"
          },
          "eventMapping": {
            "$ref": "#/components/schemas/EventMappingRequest"
          },
          "externalId": {
            "type": "string",
            "description": "External Identifier",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TicketHolderRequest": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TicketHolderResource": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TicketRequest": {
        "type": "object",
        "properties": {
          "ordinal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "seat": {
            "type": "string",
            "nullable": true
          },
          "barcode": {
            "type": "string",
            "nullable": true
          },
          "externalTicketId": {
            "type": "string",
            "nullable": true
          },
          "ticketUrl": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TicketResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "ordinal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "row": {
            "type": "string",
            "nullable": true
          },
          "seat": {
            "type": "string",
            "nullable": true
          },
          "barcode": {
            "type": "string",
            "nullable": true
          },
          "ticketUrl": {
            "type": "string",
            "nullable": true
          },
          "externalTicketId": {
            "type": "string",
            "nullable": true
          },
          "listingId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "saleId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "holdId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "purchaseOrderId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "vendorAccountId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "commissionPercentage": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "buyerUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "unitCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TicketSeatingRequest": {
        "type": "object",
        "properties": {
          "seatFrom": {
            "type": "string",
            "nullable": true
          },
          "seatIncrementType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TicketUpdateRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ordinal": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "seat": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransferProofUploadRequest": {
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/UserDocumentFileRequest"
          }
        },
        "additionalProperties": false
      },
      "UnderCutSetting": {
        "type": "object",
        "properties": {
          "undercutMode": {
            "type": "string",
            "nullable": true
          },
          "undercutAbsoluteAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "undercutRelativeAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserDocumentFileRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the file",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "Base64 encoded content of the file",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "description": "Content type of the file\r\n<br>\r\n    application/pdf - pdf eticket\r\n    application/vnd.apple.pkpass - Apple iPhone eticket\r\n    application/json - Google Wallet eticket\r\n",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserDocumentFileResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the file",
            "format": "uuid"
          },
          "content": {
            "type": "string",
            "description": "Base64 encoded content of the file",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "description": "Content type of the file. e.g. (application/pdf)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VendorAccountRequest": {
        "type": "object",
        "properties": {
          "vendorAccountName": {
            "type": "string",
            "nullable": true
          },
          "vendorAccountEmailAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VendorResource": {
        "type": "object",
        "properties": {
          "vendorId": {
            "type": "integer",
            "format": "int32"
          },
          "vendorName": {
            "type": "string",
            "nullable": true
          },
          "vendorAccountName": {
            "type": "string",
            "nullable": true
          },
          "vendorAccountEmail": {
            "type": "string",
            "nullable": true
          },
          "purchaseOrderId": {
            "type": "integer",
            "format": "int64"
          },
          "isAlternativeDeliveryAccount": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "VenueResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "timeZone": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}
